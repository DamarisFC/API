// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                       String          @id @default(uuid())
  nome                     String
  documentoIdentificacao   String          @unique @map("documento_identificacao")
  telefone                 String?
  email                    String?         @unique

  // renomeia a tabela Usuario para usuario
  @@map("usuario")
  MaeSolo MaeSolo[]
  Doador Doador[]
  ProfissionalApoio ProfissionalApoio[]
}

// enum com grau de escolaridade 
enum Escolaridade {
  medioIncompleto
  medioCompleto
  superiorIncompleto
  superiorCompleto
}

model MaeSolo {
  id                       String          @id
  data_nascimento          DateTime
  escolaridade             Escolaridade
  endereco                 String       
  rendaMensal              Int           @map("renda_mensal")    // renomeia redalMensal para renda_mensal
  situacaoTrabalho         Boolean      @map("situacao_trabalho")   //coloquei situacao_trabalho como boolean, trabalhando como true e n√£o trabalhando para false
  usuario                  Usuario         @relation(fields: [id], references: [id]) 
  
  // renomeia a tabela MaeSolo para mae_solo
  @@map("mae_solo")
  Filho Filho[]
  Encaminhamento Encaminhamento[]
}

model Filho {
  id        String          @id @default(uuid())
  nome      String 
  data_nascimento     DateTime
  idMae     String          @map("id_mae")
  mae       MaeSolo         @relation(fields: [idMae], references: [id]) 
  @@map("filho")
}


model Doador {
  id                       String          @id
  tipo_doador              String
  usuario                  Usuario         @relation(fields: [id], references: [id])
  // 
  @@map("doador")
}

model ProfissionalApoio {
  id                      String           @id
  usuario                 Usuario          @relation(fields: [id], references: [id])
  // talvez pode ser bom colocar areaAtuacao como enum 
  areaAtuacao             String           @map("area_atuacao") // renomeia areaAtuacao para area_atuacao
  @@map("profissional_apoio")

  Disponibilidade Disponibilidade[]

  Encaminhamento Encaminhamento[]
}

model Disponibilidade {
  id                       String         @id @default(uuid())
  id_profissional          String
  data                     String
  horario                  String
  profissional             ProfissionalApoio         @relation(fields: [id_profissional], references: [id])
  @@map("disponibilidade")  // renomeia a tabela Diponibilidade para disponibilidade
}

// enum para o status do encaminhamento
enum StatusEncaminhamento {
  emAndamento
  finalizado
  marcado
}

model   Encaminhamento {
  id                       String               @id @default(uuid())
  id_mae                   String 
  id_profissional          String
  data                     DateTime
  status                   StatusEncaminhamento
  tipo_servico             String     // pode ser um enum onde tem os tipos de servicos permitidos
  maeSolo                  MaeSolo              @relation(fields: [id_mae], references: [id])
  profissional             ProfissionalApoio    @relation(fields: [id_profissional], references: [id])
  @@map("encaminhamento")
  Atendimento Atendimento[]
}

model Atendimento {
  id                      String            @id @default(uuid())
  id_encaminhamento       String
  observacoes             String
  data                    DateTime
  encaminhamento          Encaminhamento    @relation(fields: [id_encaminhamento], references: [id])
  @@map("atendimento")
}